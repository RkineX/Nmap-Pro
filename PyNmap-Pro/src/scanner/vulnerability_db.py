import json
from pathlib import Path
from typing import Dict, List

class VulnerabilityDB:
    def __init__(self, db_path: str = "vulnerabilities.json"):
        self.db_path = Path(db_path)
        self.vulnerabilities = self._load_db()

    def _load_db(self) -> Dict:
        """Load vulnerability database from JSON file"""
        try:
            with self.db_path.open() as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return self._sample_db()

    def _sample_db(self) -> Dict:
        """Fallback sample vulnerability data"""
        return {
            "CVE-2023-1234": {
                "ports": [22, 2222],
                "services": ["ssh"],
                "risk": "Critical",
                "description": "SSH Protocol Vulnerability"
            },
            "CVE-2023-5678": {
                "ports": [80, 443],
                "services": ["http", "https"],
                "risk": "High",
                "description": "Web Server Buffer Overflow"
            }
        }

    def match_vulnerabilities(self, scan_data: Dict) -> List[Dict]:
        """Match scan results with known vulnerabilities"""
        findings = []
        for host, data in scan_data.items():
            for port_info in data.get('ports', []):
                for cve, details in self.vulnerabilities.items():
                    if port_info['port'] in details['ports'] and \
                       port_info['service'] in details['services']:
                        findings.append({
                            "host": host,
                            "cve": cve,
                            "port": port_info['port'],
                            "risk": details['risk'],
                            "description": details['description']
                        })
        return findings
